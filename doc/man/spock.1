.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.
.TH SPOCK "1" "February 2018" "spock 2.4.0" "User Commands"
.SH NAME
spock \- manual page for spock 2.4.0
.SH DESCRIPTION
=========
.IP
IPython
.PP
=========
.PP
Tools for Interactive Computing in Python
=========================================
.IP
A Python shell with automatic history (input and output), dynamic object
introspection, easier configuration, command completion, access to the
system shell and more.  IPython can also be embedded in running programs.
.PP
Usage
.IP
ipython [subcommand] [options] [\-c cmd | \fB\-m\fR mod | file] [\-\-] [arg] ...
.IP
If invoked with no options, it executes the file and exits, passing the
remaining arguments to the script, just as if you had specified the same
command with python. You may need to specify `\-\-` before args to be passed
to the script, to prevent IPython from attempting to parse them. If you
specify the option `\-i` before the filename, it will enter an interactive
IPython session after running the script, rather than exiting. Files ending
in .py will be treated as normal Python, but files ending in .ipy can
contain special IPython syntax (magic commands, shell expansions, etc.).
.IP
Almost all configuration in IPython is available via the command\-line. Do
`ipython \fB\-\-help\-all\fR` to see all available options.  For persistent
configuration, look into your `ipython_config.py` configuration file for
details.
.IP
This file is typically installed in the `IPYTHONDIR` directory, and there
is a separate configuration directory for each profile. The default profile
directory will be located in \fI\,$IPYTHONDIR/profile_default\/\fP. IPYTHONDIR
defaults to to `$HOME/.ipython`.  For Windows users, $HOME resolves to
C:\eUsers\eYourUserName in most instances.
.IP
To initialize a profile with the default configuration file, do::
.IP
$> ipython profile create
.IP
and start editing `IPYTHONDIR/profile_default/ipython_config.py`
.IP
In IPython's documentation, we will refer to this directory as
`IPYTHONDIR`, you can change its default location by creating an
environment variable with this name and setting it to the desired path.
.IP
For more information, see the manual available in HTML and PDF in your
installation, or online at http://ipython.org/documentation.html.
.PP
Subcommands
\fB\-\-\-\-\-\-\-\-\-\-\-\fR
.PP
Subcommands are launched as `ipython cmd [args]`. For information on using
subcommand 'cmd', do: `ipython cmd \fB\-h\fR`.
.PP
locate
.IP
print the path to the IPython dir
.PP
kernel
.IP
Start a kernel without an attached frontend.
.PP
console
.IP
DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter terminal\-based Console.
.PP
install\-nbextension
.IP
DEPRECATED, Will be removed in IPython 6.0 : Install Jupyter notebook extension files
.PP
kernelspec
.IP
DEPRECATED, Will be removed in IPython 6.0 : Manage Jupyter kernel specifications.
.PP
notebook
.IP
DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter HTML Notebook Server.
.PP
profile
.IP
Create and manage IPython profiles.
.PP
qtconsole
.IP
DEPRECATED, Will be removed in IPython 6.0 : Launch the Jupyter Qt Console.
.PP
nbconvert
.IP
DEPRECATED, Will be removed in IPython 6.0 : Convert notebooks to/from other formats.
.PP
trust
.IP
DEPRECATED, Will be removed in IPython 6.0 : Sign notebooks to trust their potentially unsafe contents at load.
.PP
history
.IP
Manage the IPython history database.
.PP
Options
\fB\-\-\-\-\-\-\-\fR
.PP
Arguments that take values are actually convenience aliases to full
Configurables, whose aliases are listed on the help line. For more information
on full configurables, see '\-\-help\-all'.
.PP
\fB\-\-no\-autoindent\fR
.IP
Turn off autoindenting.
.PP
\fB\-\-autoedit\-syntax\fR
.IP
Turn on auto editing of files with syntax errors.
.PP
\fB\-\-pylab\fR
.IP
Pre\-load matplotlib and numpy for interactive use with
the default matplotlib backend.
.PP
\fB\-\-simple\-prompt\fR
.IP
Force simple minimal prompt using `raw_input`
.PP
\fB\-\-confirm\-exit\fR
.IP
Set to confirm when you try to exit IPython with an EOF (Control\-D
in Unix, Control\-Z/Enter in Windows). By typing 'exit' or 'quit',
you can force a direct exit without any confirmation.
.PP
\fB\-\-no\-autoedit\-syntax\fR
.IP
Turn off auto editing of files with syntax errors.
.PP
\fB\-\-matplotlib\fR
.IP
Configure matplotlib for interactive use with
the default matplotlib backend.
.PP
\fB\-\-term\-title\fR
.IP
Enable auto setting the terminal title.
.PP
\fB\-\-no\-confirm\-exit\fR
.IP
Don't prompt the user when exiting.
.PP
\fB\-\-autoindent\fR
.IP
Turn on autoindenting.
.PP
\fB\-\-no\-automagic\fR
.IP
Turn off the auto calling of magic commands.
.PP
\fB\-\-no\-simple\-prompt\fR
.IP
Use a rich interactive prompt with prompt_toolkit
.PP
\fB\-\-banner\fR
.IP
Display a banner upon starting IPython.
.PP
\fB\-\-automagic\fR
.IP
Turn on the auto calling of magic commands. Type %%magic at the
IPython  prompt  for  more information.
.PP
\fB\-\-no\-term\-title\fR
.IP
Disable auto setting the terminal title.
.PP
\fB\-\-nosep\fR
.IP
Eliminate all spacing between prompts.
.PP
\fB\-i\fR
.IP
If running code from the command line, become interactive afterwards.
It is often useful to follow this with `\-\-` to treat remaining flags as
script arguments.
.PP
\fB\-\-debug\fR
.IP
set log level to logging.DEBUG (maximize logging output)
.PP
\fB\-\-classic\fR
.IP
Gives IPython a similar feel to the classic Python prompt.
.PP
\fB\-\-quiet\fR
.IP
set log level to logging.CRITICAL (minimize logging output)
.PP
\fB\-\-pprint\fR
.IP
Enable auto pretty printing of results.
.PP
\fB\-\-pdb\fR
.IP
Enable auto calling the pdb debugger after every exception.
.PP
\fB\-\-color\-info\fR
.IP
IPython can display information about objects via a set of functions,
and optionally can use colors for this, syntax highlighting
source code and various other elements. This is on by default, but can cause
problems with some pagers. If you see such problems, you can disable the
colours.
.PP
\fB\-\-init\fR
.TP
Initialize profile with default config files.
This is equivalent
.IP
to running `ipython profile create <profile>` prior to startup.
.PP
\fB\-\-no\-pdb\fR
.IP
Disable auto calling the pdb debugger after every exception.
.PP
\fB\-\-quick\fR
.IP
Enable quick startup with no config files.
.PP
\fB\-\-no\-color\-info\fR
.IP
Disable using colors for info related things.
.PP
\fB\-\-no\-pprint\fR
.IP
Disable auto pretty printing of results.
.PP
\fB\-\-no\-banner\fR
.IP
Don't display a banner upon starting IPython.
.PP
\fB\-\-profile=\fR<Unicode> (BaseIPythonApplication.profile)
.IP
Default: u'default'
The IPython profile to use.
.PP
\fB\-\-pylab=\fR<CaselessStrEnum> (InteractiveShellApp.pylab)
.IP
Default: None
Choices: [u'auto', u'gtk', u'gtk3', u'inline', u'nbagg', u'notebook', u'osx', u'qt', u'qt4', u'qt5', u'tk', u'wx']
Pre\-load matplotlib and numpy for interactive use, selecting a particular
matplotlib backend and loop integration.
.PP
\fB\-\-matplotlib=\fR<CaselessStrEnum> (InteractiveShellApp.matplotlib)
.IP
Default: None
Choices: [u'auto', u'gtk', u'gtk3', u'inline', u'nbagg', u'notebook', u'osx', u'qt', u'qt4', u'qt5', u'tk', u'wx']
Configure matplotlib for interactive use with the default matplotlib
backend.
.PP
\fB\-\-colors=\fR<CaselessStrEnum> (InteractiveShell.colors)
.IP
Default: 'Neutral'
Choices: [u'Neutral', u'NoColor', u'LightBG', u'Linux']
Set the color scheme (NoColor, Neutral, Linux, or LightBG).
.PP
\fB\-\-cache\-size=\fR<Integer> (InteractiveShell.cache_size)
.IP
Default: 1000
Set the size of the output cache.  The default is 1000, you can change it
permanently in your config file.  Setting it to 0 completely disables the
caching system, and the minimum value accepted is 20 (if you provide a value
less than 20, it is reset to 0 and a warning is issued).  This limit is
defined because otherwise you'll spend more time re\-flushing a too small
cache than working
.PP
\fB\-\-logfile=\fR<Unicode> (InteractiveShell.logfile)
.IP
Default: ''
The name of the logfile to use.
.PP
\fB\-\-profile\-dir=\fR<Unicode> (ProfileDir.location)
.IP
Default: u''
Set the profile location directly. This overrides the logic used by the
`profile` option.
.PP
\fB\-c\fR <Unicode> (InteractiveShellApp.code_to_run)
.IP
Default: ''
Execute the given command string.
.PP
\fB\-\-autocall=\fR<Enum> (InteractiveShell.autocall)
.IP
Default: 0
Choices: (0, 1, 2)
Make IPython automatically call any callable object even if you didn't type
explicit parentheses. For example, 'str 43' becomes 'str(43)' automatically.
The value can be '0' to disable the feature, '1' for 'smart' autocall, where
it is not applied if there are no more arguments on the line, and '2' for
\&'full' autocall, where all callable objects are automatically called (even
if no arguments are present).
.PP
\fB\-\-ipython\-dir=\fR<Unicode> (BaseIPythonApplication.ipython_dir)
.IP
Default: u''
The name of the IPython directory. This directory is used for logging
configuration (through profiles), history storage, etc. The default is
usually $HOME/.ipython. This option can also be specified through the
environment variable IPYTHONDIR.
.PP
\fB\-\-gui=\fR<CaselessStrEnum> (InteractiveShellApp.gui)
.IP
Default: None
Choices: [u'glut', u'gtk', u'gtk2', u'gtk3', u'osx', u'pyglet', u'qt', u'qt4', u'qt5', u'tk', u'wx', u'gtk2', u'qt4']
Enable GUI event loop integration with any of ('glut', 'gtk', 'gtk2',
\&'gtk3', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'tk', 'wx', 'gtk2', 'qt4').
.PP
\fB\-\-logappend=\fR<Unicode> (InteractiveShell.logappend)
.IP
Default: ''
Start logging to the given file in append mode. Use `logfile` to specify a
log file to **overwrite** logs to.
.PP
\fB\-m\fR <Unicode> (InteractiveShellApp.module_to_run)
.IP
Default: ''
Run the module as a script.
.PP
\fB\-\-log\-level=\fR<Enum> (Application.log_level)
.IP
Default: 30
Choices: (0, 10, 20, 30, 40, 50, 'DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
Set the log level by value or name.
.PP
\fB\-\-ext=\fR<Unicode> (InteractiveShellApp.extra_extension)
.IP
Default: ''
dotted module name of an IPython extension to load.
.PP
\fB\-\-config=\fR<Unicode> (BaseIPythonApplication.extra_config_file)
.IP
Default: u''
Path to an extra config file to load.
If specified, load this config file in addition to any other IPython config.
.PP
To see all available configurables, use `\-\-help\-all`
.PP
Examples
\fB\-\-\-\-\-\-\-\-\fR
.TP
ipython \fB\-\-matplotlib\fR
# enable matplotlib integration
.TP
ipython \fB\-\-matplotlib\fR=\fI\,qt\/\fR
# enable matplotlib integration with qt4 backend
.TP
ipython \fB\-\-log\-level\fR=\fI\,DEBUG\/\fR
# set logging to DEBUG
.TP
ipython \fB\-\-profile\fR=\fI\,foo\/\fR
# start with profile foo
.IP
ipython profile create foo # create profile foo w/ default config files
ipython help profile       # show the help for the profile subcmd
.TP
ipython locate
# print the path to the IPython directory
.IP
ipython locate profile foo # print the path to the directory for profile `foo`
